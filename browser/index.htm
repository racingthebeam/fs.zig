<!DOCTYPE html>

<html>
  <head>
    <title>FS-WASM Test</title>
    <script type="module">
      function blockChanged(deviceId, block) {
        console.log("block changed %d:%d", deviceId, block);
      }

      class MemoryRegion {
        #mem;
        #buf = null;
        #ary = null;

        constructor(memory, offset, length) {
          this.#mem = memory;
          this.offset = offset;
          this.length = length;
        }

        get view() {
          this.#reset(); 
          return this.#ary;
        }

        get() {
          this.#reset(); 
          return this.#ary;
        }

        read(dst) {
          this.#reset();
          dst.set(this.#ary.subarray(0, dst.length), 0);
        }

        write(src) {
          this.#reset();
          this.#ary.subarray(0, src.length).set(src, 0);
        }

        #reset() {
          if (this.#buf !== this.#mem.buffer) {
            this.#buf = this.#mem.buffer;
            this.#ary = new Uint8Array(this.#buf, this.offset, this.length);
          }
        }
      }

      const E_NOENT = -7;

      class FileSystems {
        #api;                         // WASM functions
        #mem;                         // WASM memory
        #shuttle;                     // memory region for transferring data blocks to/from WASM
        #str;                         // memory region for transferring input strings to WASM
        #strPtr = 0;                  // string write pointer
        #strEnc = new TextEncoder();
        #blockDevices = new Map();    // active block devices
        
        constructor(instance) {
          this.#api = instance.exports;
          this.#mem = instance.exports.memory;
          this.#shuttle = new MemoryRegion(instance.exports.memory, this.#api.getShuttleBufferPtr(), this.#api.getShuttleBufferSize());
          this.#str = new MemoryRegion(instance.exports.memory, this.#api.getStringBufferPtr(), this.#api.getStringBufferSize());

          this.#api.init();
          
          console.log(this.#api);
        }

        //
        // Block Device Management

        createBlockDevice(blockSize, blockCount) {
          const id = this.#api.createBlockDevice(blockSize, blockCount);
          this.#checkStatus(id);
          this.#blockDevices.set(id, {size: blockSize, count: blockCount});
          return id;
        }

        destroyBlockDevice(deviceId) {
          const status = this.#api.destroyBlockDevice(deviceId);
          this.#checkStatus(status);
          this.#blockDevices.delete(id);
        }

        //
        // Block Device Access

        readBlock(dst, deviceId, block) {
          this.#assertDeviceExists(deviceId, dst.length);
          this.#checkStatus(this.#api.readBlock(deviceId, block));
          this.#shuttle.read(dst);
        }

        writeBlock(deviceId, block, src) {
          this.#assertDeviceExists(deviceId, src.length);
          this.#shuttle.write(src);
          this.#checkStatus(this.#api.writeBlock(deviceId, block));
        }

        zeroBlock(deviceId, block) {
          this.#checkStatus(this.#api.zeroBlock(deviceId, block)); 
        }

        //
        // File System Management

        formatFS(deviceId, inodeBlockCount) {
          this.#assertDeviceExists(deviceId);
          const id = this.#checkStatus(this.#api.fileSystemFormat(deviceId, inodeBlockCount));
          return this.#shuttle.view.slice(0, 16);
        }

        initFS(deviceId, config) {
          if (config.length !== 16) {
            throw new Error(`FS config must be exactly 16 bytes`);
          }
          this.#shuttle.write(config);
          return this.#checkStatus(this.#api.fileSystemInit(deviceId));
        }

        destroyFS(fsId) {
          return this.#checkStatus(this.#api.fileSystemDestroy(fsId)); 
        }

        //
        // File System Access

        lookup(fsId, inode, name) {
          this.#resetStringBuffer();
          const {ptr, len} = this.#writeString(name);
          const res = this.#api.fsLookup(fsId, inode, ptr, len);
          if (res === E_NOENT) return null;
          return this.#checkStatus(res);
        }

        exists(fsId, inode, name) {
          this.#resetStringBuffer();
          const {ptr, len} = this.#writeString(name);
          const res = this.#api.fsExists(fsId, inode, ptr, len);
          return this.#checkStatus(res) > 0;
        }

        stat(fsId, inode) {
          const len = this.#checkStatus(this.#api.fsStat(fsId, inode));
          return this.#readStat(len);
        }

        // open
        // unlink
        // read
        // write
        // close
        // tell
        // eof
        // seek

        mkdir(fsId, inode, name) {
          this.#resetStringBuffer();
          const {ptr, len} = this.#writeString(name);
          return this.#checkStatus(this.#api.fsMkdir(fsId, inode, ptr, len));
        }

        rmdir(fsId, inode, name) {
          this.#resetStringBuffer();
          const {ptr, len} = this.#writeString(name);
          return this.#checkStatus(this.#api.fsRmdir(fsId, inode, ptr, len));
        }

        opendir(fsId, inode) {
          return this.#checkStatus(this.#api.fsOpendir(fsId, inode));
        }

        closedir(fsId, fd) {
          return this.#checkStatus(this.#api.fsClosedir(fsId, fd));
        }

        readdir(fsId, fd) {
          const len = this.#checkStatus(this.#api.fsReaddir(fsId, fd));
          return (len > 0) ? this.#readStat(len) : false;
        }

        //
        // Internals

        #assertDeviceExists(id, expectedBlockSize = null) {
          const device = this.#blockDevices.get(id);
          if (!device) throw new Error(`unknown block device ${id}`);
          if (expectedBlockSize !== null && expectedBlockSize !== device.size) {
            throw new Error(`incorrect block size for device ${id} (expected=${expectedBlockSize}, actual=${device.size})`);
          }
        }

        #checkStatus(status) {
          if (status < 0) {
            // TODO: proper error type
            throw new Error(`status: ${status}`);
          }
          return status;
        }

        //
        // String encoding

        #resetStringBuffer() {
          this.#strPtr = 0;
        }

        // Write a string to WASM memory and return the pointer/length so it can
        #writeString(str) {
          const res = this.#strEnc.encodeInto(str, this.#str.view.subarray(this.#strPtr));
          const out = {ptr: this.#str.offset + this.#strPtr, len: res.written};
          this.#strPtr += res.written;
          return out;
        }

        #readStat(len) {
          return new Stat(this.#shuttle.get(), len);
        }
      }

      class Stat {
        constructor(buffer, len) {
          if (len !== 29) throw new Error(`invalid stat format - expected 25 bytes, got ${len}`);
          
          const nameEnd = buffer.indexOf(0);
          const name = (nameEnd <= 0)
            ? null
            : new TextDecoder().decode(buffer.subarray(0, nameEnd));

          const slice = buffer.subarray(15, 29);
          const dv = new DataView(slice.buffer, slice.byteOffset, slice.byteLength);

          this.name = name;
          this.inode = dv.getUint32(0);
          this.type = dv.getUint8(4);
          this.executable = dv.getUint8(5) > 0;
          this.mtime = dv.getUint32(6, false);
          this.size = dv.getUint32(10, false);
        }

        get isFile() { return this.type === 1; }
        get isDir() { return this.type === 2; }
        get isExecutable() { return this.executable; }
      }

      WebAssembly.instantiateStreaming(fetch("../build/fs.wasm"), {
        env: {
          notifyBlockChanged: blockChanged,
          now: () => { return BigInt(Math.floor(Date.now() / 1000)); }
        }
      }).then((obj) => {
        const theFS = new FileSystems(obj.instance);

        const deviceId = theFS.createBlockDevice(512, 1024);
        console.log(`Created block device, ID=${deviceId}`);

        const fsConfig = theFS.formatFS(deviceId, 32);
        console.log(fsConfig);

        const fsId = theFS.initFS(deviceId, fsConfig);
        
        console.log("lookup foo", theFS.lookup(fsId, 0, "test-1"));
        console.log("exists foo", theFS.exists(fsId, 0, "test-1"));
        
        console.log(theFS.mkdir(fsId, 0, "test-1"));
        console.log(theFS.mkdir(fsId, 0, "test-2"));
        console.log(theFS.mkdir(fsId, 0, "test-3"));

        console.log("lookup foo", theFS.lookup(fsId, 0, "test-1"));
        console.log("exists foo", theFS.exists(fsId, 0, "test-1"));

        console.log("lookup bar", theFS.lookup(fsId, 0, "test-2"));
        console.log("exists bar", theFS.exists(fsId, 0, "test-2"));

        const fd = theFS.opendir(fsId, 0);
        console.log("fd", fd);
        while (true) {
          const res = theFS.readdir(fsId, fd);
          if (!res) {
            console.log("end of dir");
            break;
          } else {
            console.log("directory entry", res);
          }
        }
        theFS.closedir(fsId, fd);

        console.log(theFS.rmdir(fsId, 0, "test-2"));

        console.log("AFTER DELETE");
        const fd2 = theFS.opendir(fsId, 0);
        console.log("fd", fd2);
        while (true) {
          const res = theFS.readdir(fsId, fd2);
          if (!res) {
            console.log("end of dir");
            break;
          } else {
            console.log("directory entry", res);
          }
        }
        theFS.closedir(fsId, fd2);

        console.log("stat root", theFS.stat(fsId, 0));
      });
    </script>
  </head>
  <body>
    <h1>FS-WASM Test</h1> 
  </body>
</html>
